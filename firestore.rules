rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // This rule allows anyone with your database reference to view, edit,
    // and delete all data in your Firestore database. It is useful for getting
    // started, but it is configured to expire after 30 days because it
    // leaves your app open to attackers. At that time, all client
    // requests to your Firestore database will be denied.
    //
    // Make sure to write security rules for your app before that time, or else
    // all client requests to your Firestore database will be denied until you Update
    // your rules
    match /{document=**} {
      allow read, write: if request.time < timestamp.date(2020, 9, 13);
    }
  }

	match /databases/{database}/documents {
  	function serverTimestamp() { return firebase.firestore.FieldValue.serverTimestamp(); }
    function isAuthenticated() { return request.auth != null; }
    function isUserAuthenticated(userID) { return isAuthenticated() && request.auth.uid == userID; }
    function existingData() { return resource.data; }
    function incomingData() { return request.resource.data; }
    function validateString(text, min, max) { return text is string && text.size() >= min && text.size() <= max; }

    //match /users/{userID} {
    //  allow get: if isAuthenticated()
    //  allow create: if request.time == serverTimestamp()
    //  	&& isUserAuthenticated(userID)
    //    && validateString(incomingData.displayName, 1, 20);
    //  allow update: if request.time == serverTimestamp()
    //  	&& isUserAuthenticated(userID)
    //  	&& (!('displayName' in incomingData()) || validateString(incomingData.displayName, 1, 20));
    //}
  }
}
